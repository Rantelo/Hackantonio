#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'hackantonio_types'


module ActionService
  class Client
    include ::Thrift::Client

    def register_action(new_action)
      send_register_action(new_action)
      return recv_register_action()
    end

    def send_register_action(new_action)
      send_message('register_action', Register_action_args, :new_action => new_action)
    end

    def recv_register_action()
      result = receive_message(Register_action_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'register_action failed: unknown result')
    end

    def update_action(updated_action)
      send_update_action(updated_action)
      return recv_update_action()
    end

    def send_update_action(updated_action)
      send_message('update_action', Update_action_args, :updated_action => updated_action)
    end

    def recv_update_action()
      result = receive_message(Update_action_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'update_action failed: unknown result')
    end

    def remove_action(remove_me)
      send_remove_action(remove_me)
      return recv_remove_action()
    end

    def send_remove_action(remove_me)
      send_message('remove_action', Remove_action_args, :remove_me => remove_me)
    end

    def recv_remove_action()
      result = receive_message(Remove_action_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'remove_action failed: unknown result')
    end

    def get_action(id)
      send_get_action(id)
      return recv_get_action()
    end

    def send_get_action(id)
      send_message('get_action', Get_action_args, :id => id)
    end

    def recv_get_action()
      result = receive_message(Get_action_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_action failed: unknown result')
    end

    def get_actions_for_device(device_id)
      send_get_actions_for_device(device_id)
      return recv_get_actions_for_device()
    end

    def send_get_actions_for_device(device_id)
      send_message('get_actions_for_device', Get_actions_for_device_args, :device_id => device_id)
    end

    def recv_get_actions_for_device()
      result = receive_message(Get_actions_for_device_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_actions_for_device failed: unknown result')
    end

    def get_all_actions()
      send_get_all_actions()
      return recv_get_all_actions()
    end

    def send_get_all_actions()
      send_message('get_all_actions', Get_all_actions_args)
    end

    def recv_get_all_actions()
      result = receive_message(Get_all_actions_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_all_actions failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_register_action(seqid, iprot, oprot)
      args = read_args(iprot, Register_action_args)
      result = Register_action_result.new()
      result.success = @handler.register_action(args.new_action)
      write_result(result, oprot, 'register_action', seqid)
    end

    def process_update_action(seqid, iprot, oprot)
      args = read_args(iprot, Update_action_args)
      result = Update_action_result.new()
      result.success = @handler.update_action(args.updated_action)
      write_result(result, oprot, 'update_action', seqid)
    end

    def process_remove_action(seqid, iprot, oprot)
      args = read_args(iprot, Remove_action_args)
      result = Remove_action_result.new()
      result.success = @handler.remove_action(args.remove_me)
      write_result(result, oprot, 'remove_action', seqid)
    end

    def process_get_action(seqid, iprot, oprot)
      args = read_args(iprot, Get_action_args)
      result = Get_action_result.new()
      result.success = @handler.get_action(args.id)
      write_result(result, oprot, 'get_action', seqid)
    end

    def process_get_actions_for_device(seqid, iprot, oprot)
      args = read_args(iprot, Get_actions_for_device_args)
      result = Get_actions_for_device_result.new()
      result.success = @handler.get_actions_for_device(args.device_id)
      write_result(result, oprot, 'get_actions_for_device', seqid)
    end

    def process_get_all_actions(seqid, iprot, oprot)
      args = read_args(iprot, Get_all_actions_args)
      result = Get_all_actions_result.new()
      result.success = @handler.get_all_actions()
      write_result(result, oprot, 'get_all_actions', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Register_action_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NEW_ACTION = 1

    FIELDS = {
      NEW_ACTION => {:type => ::Thrift::Types::STRUCT, :name => 'new_action', :class => ::Action}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Register_action_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Response}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @success.nil? || ::Response::VALID_VALUES.include?(@success)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_action_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    UPDATED_ACTION = 1

    FIELDS = {
      UPDATED_ACTION => {:type => ::Thrift::Types::STRUCT, :name => 'updated_action', :class => ::Action}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_action_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Response}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @success.nil? || ::Response::VALID_VALUES.include?(@success)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Remove_action_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REMOVE_ME = 1

    FIELDS = {
      REMOVE_ME => {:type => ::Thrift::Types::STRUCT, :name => 'remove_me', :class => ::Action}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Remove_action_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Response}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @success.nil? || ::Response::VALID_VALUES.include?(@success)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_action_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_action_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Action}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_actions_for_device_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DEVICE_ID = 1

    FIELDS = {
      DEVICE_ID => {:type => ::Thrift::Types::I32, :name => 'device_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_actions_for_device_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Action}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_actions_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_all_actions_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::I32}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRUCT, :class => ::Action}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

